---
export interface Props {
    title?: string;
    subtitle?: string;
    description?: string;
    'data-sb-field-path'?: string;
}

const {
    title = 'Service Coverage Map',
    subtitle = 'Interactive coverage areas',
    description = 'Click on any state to view the cities we serve in that region.',
    'data-sb-field-path': fieldPath
} = Astro.props;

// Coverage data with cities for SEO
const coverageAreas = {
    washington: {
        name: 'Washington',
        serviceLevel: '24/7 STAT & Scheduled Routes',
        responseTime: 'Under 2 hours',
        cities: [
            'Seattle',
            'Spokane',
            'Tacoma',
            'Vancouver',
            'Bellevue',
            'Everett',
            'Bellingham',
            'Olympia',
            'Yakima',
            'Federal Way',
            'Renton',
            'Kent'
        ]
    },
    oregon: {
        name: 'Oregon',
        serviceLevel: '24/7 STAT & Scheduled Routes',
        responseTime: 'Under 3 hours',
        cities: [
            'Portland',
            'Eugene',
            'Salem',
            'Bend',
            'Medford',
            'Hillsboro',
            'Beaverton',
            'Gresham',
            'Springfield',
            'Corvallis',
            'Lake Oswego',
            'Grants Pass'
        ]
    },
    idaho: {
        name: 'Idaho',
        serviceLevel: 'Scheduled Routes & Equipment Transport',
        responseTime: 'Under 4 hours',
        cities: [
            'Boise',
            'Idaho Falls',
            'Pocatello',
            "Coeur d'Alene",
            'Twin Falls',
            'Meridian',
            'Nampa',
            'Lewiston',
            'Caldwell',
            'Post Falls',
            'Rexburg',
            'Moscow'
        ]
    },
    montana: {
        name: 'Montana',
        serviceLevel: 'Scheduled Routes & Equipment Transport',
        responseTime: 'Under 6 hours',
        cities: [
            'Billings',
            'Missoula',
            'Great Falls',
            'Bozeman',
            'Butte',
            'Helena',
            'Kalispell',
            'Whitefish',
            'Livingston',
            'Hamilton',
            'Miles City',
            'Havre'
        ]
    },
    california: {
        name: 'Northern California',
        serviceLevel: '24/7 STAT & Scheduled Routes',
        responseTime: 'Under 2 hours',
        cities: [
            'San Francisco',
            'Sacramento',
            'San Jose',
            'Oakland',
            'Fresno',
            'Santa Rosa',
            'Stockton',
            'Modesto',
            'Berkeley',
            'Palo Alto',
            'Santa Clara',
            'Salinas'
        ]
    }
};
---

<style>
    .coverage-map-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 1.5rem;
        padding: 2rem;
        border: 1px solid rgba(255, 255, 255, 0.3);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        margin: 2rem 0;
    }

    .map-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
        align-items: start;
    }

    .leaflet-map-wrapper {
        background: rgba(28, 60, 61, 0.9);
        border-radius: 1rem;
        padding: 1rem;
        min-height: 500px;
        position: relative;
        overflow: hidden;
    }

    #coverage-map {
        width: 100%;
        height: 450px;
        border-radius: 0.5rem;
        z-index: 1;
        opacity: 0.9;
    }

    .info-panel {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 1rem;
        padding: 1.5rem;
        border: 1px solid rgba(255, 255, 255, 0.4);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }


    .service-info {
        background: linear-gradient(135deg, rgba(28, 60, 61, 0.9), rgba(47, 133, 90, 0.9));
        color: white;
        padding: 1rem;
        border-radius: 0.75rem;
        margin-bottom: 1rem;
    }

    .default-message {
        text-align: center;
        padding: 2rem;
        color: rgba(28, 60, 61, 0.7);
    }

    .state-buttons {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
        gap: 0.75rem;
        margin-bottom: 1.5rem;
    }

    .state-button {
        background: rgba(28, 60, 61, 0.1);
        border: 2px solid rgba(28, 60, 61, 0.3);
        color: rgba(28, 60, 61, 1);
        padding: 0.75rem 1rem;
        border-radius: 0.5rem;
        font-weight: 600;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .state-button:hover {
        background: rgba(28, 60, 61, 0.2);
        border-color: rgba(28, 60, 61, 0.6);
        transform: translateY(-2px);
    }

    .state-button.active {
        background: rgba(28, 60, 61, 0.9);
        color: white;
        border-color: rgba(28, 60, 61, 1);
    }

    @media (max-width: 768px) {
        .map-container {
            grid-template-columns: 1fr;
            gap: 1rem;
        }

        #coverage-map {
            height: 350px;
        }
    }
</style>

<div class='coverage-map-container' data-sb-field-path={fieldPath}>
    <!-- Section Header -->
    <div class='text-center mb-8'>
        <p class='text-lg text-neutral-light max-w-2xl mx-auto mb-2'>
            {subtitle}
        </p>
        <p class='text-base-content max-w-3xl mx-auto'>
            {description}
        </p>
    </div>

    <!-- Interactive Map Content -->
    <div class='map-container'>
        <!-- Real Map -->
        <div class='leaflet-map-wrapper'>
            <div id='coverage-map'></div>
        </div>

        <!-- Info Panel -->
        <div class='info-panel'>
            <!-- State Selection Buttons -->
            <div class='state-buttons'>
                <button class='state-button' data-state='washington'>Washington</button>
                <button class='state-button' data-state='oregon'>Oregon</button>
                <button class='state-button' data-state='california'>N. California</button>
                <button class='state-button' data-state='idaho'>Idaho</button>
                <button class='state-button' data-state='montana'>Montana</button>
            </div>

            <div id='state-info'>
                <div class='default-message'>
                    <h3 class='text-xl font-bold text-primary mb-2'>Select a Coverage Area</h3>
                    <p>Click on any state button above to view our coverage cities and service information for that region.</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Leaflet CSS -->
<link
    rel='stylesheet'
    href='https://unpkg.com/leaflet@1.9.4/dist/leaflet.css'
    integrity='sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY='
    crossorigin=''
/>

<!-- Leaflet JS -->
<script
    src='https://unpkg.com/leaflet@1.9.4/dist/leaflet.js'
    integrity='sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo='
    crossorigin=''
    defer
></script>

<script defer>
    // @ts-ignore
    window.addEventListener('DOMContentLoaded', function () {
        // Coverage areas data mapped to state names in the GeoJSON
        const coverageData = {
            Washington: {
                key: 'washington',
                name: 'Washington',
                serviceLevel: '24/7 STAT & Scheduled Routes',
                responseTime: 'Under 2 hours',
                center: [47.5, -120.5],
                cities: [
                    'Seattle',
                    'Spokane',
                    'Tacoma',
                    'Vancouver',
                    'Bellevue',
                    'Everett',
                    'Bellingham',
                    'Olympia',
                    'Yakima',
                    'Federal Way',
                    'Renton',
                    'Kent',
                    'Redmond',
                    'Kirkland',
                    'Bothell',
                    'Lynnwood',
                    'Edmonds',
                    'Mukilteo',
                    'Issaquah',
                    'Sammamish',
                    'Mercer Island',
                    'Burien'
                ]
            },
            Oregon: {
                key: 'oregon',
                name: 'Oregon',
                serviceLevel: '24/7 STAT & Scheduled Routes',
                responseTime: 'Under 3 hours',
                center: [44.0, -120.5],
                cities: [
                    'Portland',
                    'Eugene',
                    'Salem',
                    'Bend',
                    'Medford',
                    'Hillsboro',
                    'Beaverton',
                    'Gresham',
                    'Springfield',
                    'Corvallis',
                    'Lake Oswego',
                    'Grants Pass',
                    'Tigard',
                    'Milwaukie',
                    'Oregon City',
                    'Tualatin',
                    'West Linn',
                    'McMinnville',
                    'Ashland',
                    'Redmond',
                    'Klamath Falls',
                    'Albany'
                ]
            },
            Idaho: {
                key: 'idaho',
                name: 'Idaho',
                serviceLevel: 'Scheduled Routes & Equipment Transport',
                responseTime: 'Under 4 hours',
                center: [45.0, -114.0],
                cities: [
                    'Boise',
                    'Idaho Falls',
                    'Pocatello',
                    "Coeur d'Alene",
                    'Twin Falls',
                    'Meridian',
                    'Nampa',
                    'Lewiston',
                    'Caldwell',
                    'Post Falls',
                    'Rexburg',
                    'Moscow',
                    'Eagle',
                    'Kuna',
                    'Mountain Home',
                    'Blackfoot',
                    'Burley',
                    'Jerome',
                    'Sandpoint',
                    'Star',
                    'Middleton',
                    'Garden City'
                ]
            },
            Montana: {
                key: 'montana',
                name: 'Montana',
                serviceLevel: 'Scheduled Routes & Equipment Transport',
                responseTime: 'Under 6 hours',
                center: [47.0, -110.0],
                cities: [
                    'Billings',
                    'Missoula',
                    'Great Falls',
                    'Bozeman',
                    'Butte',
                    'Helena',
                    'Kalispell',
                    'Whitefish',
                    'Livingston',
                    'Hamilton',
                    'Miles City',
                    'Havre',
                    'Anaconda',
                    'Belgrade',
                    'Laurel',
                    'Lewistown',
                    'Polson',
                    'Columbia Falls',
                    'Big Sky',
                    'Red Lodge',
                    'Glasgow',
                    'Glendive'
                ]
            },
            California: {
                key: 'california',
                name: 'Northern California',
                serviceLevel: '24/7 STAT & Scheduled Routes',
                responseTime: 'Under 2 hours',
                center: [38.5, -120.0],
                cities: [
                    'San Francisco',
                    'Sacramento',
                    'San Jose',
                    'Oakland',
                    'Fresno',
                    'Santa Rosa',
                    'Stockton',
                    'Modesto',
                    'Berkeley',
                    'Palo Alto',
                    'Santa Clara',
                    'Salinas',
                    'Fremont',
                    'Hayward',
                    'Sunnyvale',
                    'Concord',
                    'Vallejo',
                    'Fairfield',
                    'Richmond',
                    'Antioch',
                    'Daly City',
                    'San Mateo'
                ]
            }
        };

        // Initialize the map without zoom control
        const map = L.map('coverage-map', {
            zoomControl: false
        }).setView([45.5, -116.0], 5);

        // Add minimal grayscale tile layer (CartoDB Positron)
        L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', {
            attribution: '',
            maxZoom: 10,
            minZoom: 4,
            subdomains: 'abcd'
        }).addTo(map);

        // Store coverage overlays
        const coverageOverlays = {};

        // Load GeoJSON state boundaries from the master file
        async function loadStateGeoJSON() {
            try {
                // Fetch the master GeoJSON file with all states
                const response = await fetch('/states/geojson20m.json');
                const allStatesData = await response.json();

                // Filter and create layers for our coverage states
                allStatesData.features.forEach((feature) => {
                    const stateName = feature.properties.NAME;
                    const coverageInfo = coverageData[stateName];

                    if (coverageInfo) {
                        // Create GeoJSON layer for this state
                        const geoJsonLayer = L.geoJSON(feature, {
                            style: {
                                color: '#2f855a',
                                weight: 3,
                                fillColor: '#2f855a',
                                fillOpacity: 0.3,
                                opacity: 0.8
                            },
                            onEachFeature: function (feature, layer) {
                                // Add click handler
                                layer.on('click', function () {
                                    selectState(coverageInfo.key);
                                });

                                // Add tooltip
                                layer.bindTooltip(`${coverageInfo.name}<br>${coverageInfo.serviceLevel}`, {
                                    permanent: false,
                                    direction: 'center'
                                });
                            }
                        }).addTo(map);

                        coverageOverlays[coverageInfo.key] = geoJsonLayer;
                    }
                });
            } catch (error) {
                console.log('Could not load GeoJSON file:', error);
            }
        }

        // Load all state boundaries
        loadStateGeoJSON();

        // Get UI elements
        const stateButtons = document.querySelectorAll('.state-button');
        const infoPanel = document.getElementById('state-info');

        // Add click listeners to state buttons
        stateButtons.forEach((button) => {
            button.addEventListener('click', function () {
                const stateKey = this.getAttribute('data-state');
                selectState(stateKey);
            });
        });

        // State selection function
        function selectState(stateKey) {
            console.log('Selecting state:', stateKey);
            console.log('Available overlays:', Object.keys(coverageOverlays));

            // Update button states
            stateButtons.forEach((btn) => btn.classList.remove('active'));
            const activeButton = document.querySelector(`[data-state="${stateKey}"]`);
            if (activeButton) {
                activeButton.classList.add('active');
            }

            // Find the state data by key
            const stateData = Object.values(coverageData).find(state => state.key === stateKey);
            if (stateData) {
                // Fit to the GeoJSON layer bounds
                const overlay = coverageOverlays[stateKey];
                if (overlay) {
                    map.fitBounds(overlay.getBounds(), { padding: [20, 20] });
                }

                // Highlight selected overlay
                Object.keys(coverageOverlays).forEach((key) => {
                    const geoJsonLayer = coverageOverlays[key];
                    if (geoJsonLayer) {
                        try {
                            // GeoJSON layer styling - use eachLayer to apply to all polygons in MultiPolygon
                            geoJsonLayer.eachLayer(function (layer) {
                                if (key === stateKey) {
                                    console.log('Setting red color for:', key);
                                    // Selected state - bright red/accent color
                                    layer.setStyle({
                                        color: '#e63946',
                                        weight: 4,
                                        fillColor: '#e63946',
                                        fillOpacity: 0.6,
                                        opacity: 1
                                    });
                                } else {
                                    // Unselected states - green
                                    layer.setStyle({
                                        color: '#2f855a',
                                        weight: 3,
                                        fillColor: '#2f855a',
                                        fillOpacity: 0.3,
                                        opacity: 0.8
                                    });
                                }
                            });
                        } catch (e) {
                            console.log('Error styling overlay for', key, e);
                        }
                    }
                });
            }

            // Update info panel
            if (stateData && infoPanel) {
                infoPanel.innerHTML = `
                    <div class="service-info">
                        <h3 class="text-xl font-bold mb-2">${stateData.name}</h3>
                        <p class="text-sm opacity-90 mb-1">${stateData.serviceLevel}</p>
                        <p class="text-sm opacity-90">Response Time: ${stateData.responseTime}</p>
                    </div>
                    <h4 class="text-lg font-semibold text-primary mb-3">Cities We Serve</h4>
                    <div class="flex flex-wrap gap-2">
                        ${stateData.cities.map((city) => `
                            <span class="inline-flex items-center px-3 py-1.5 rounded-full text-sm font-medium bg-primary/10 text-primary border border-primary/20 hover:bg-primary/20 transition-colors duration-200">
                                ${city}
                            </span>
                        `).join('')}
                    </div>
                    <div class="mt-4 text-center">
                        <a href="/contact" class="inline-flex items-center gap-2 text-primary font-semibold hover:text-secondary transition-colors">
                            Get Service Quote
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M7 17l10-10M17 7H7v10"/>
                            </svg>
                        </a>
                    </div>
                `;
            }
        }

        // Set initial view to show all coverage areas
        const allBounds = [
            [35.0, -124.8], // Southwest corner
            [49.0, -104.0] // Northeast corner
        ];
        map.fitBounds(allBounds, { padding: [20, 20] });
    });
</script>
